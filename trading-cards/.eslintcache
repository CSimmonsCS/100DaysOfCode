[{"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/index.js":"1","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/App.js":"2","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/reportWebVitals.js":"3","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/Header/index.js":"4","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/SearchLayout/index.js":"5","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/tcgplayer.js":"6","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/Search/index.js":"7","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/SearchChecklist/index.js":"8","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/Products/index.js":"9","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/YuGiOh/index.js":"10"},{"size":500,"mtime":1609277105594,"results":"11","hashOfConfig":"12"},{"size":638,"mtime":1611116851595,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1609277105595,"results":"14","hashOfConfig":"12"},{"size":767,"mtime":1611114978740,"results":"15","hashOfConfig":"12"},{"size":7910,"mtime":1611185583284,"results":"16","hashOfConfig":"12"},{"size":8622,"mtime":1611116081405,"results":"17","hashOfConfig":"12"},{"size":633,"mtime":1611185102189,"results":"18","hashOfConfig":"12"},{"size":1551,"mtime":1611185479541,"results":"19","hashOfConfig":"12"},{"size":2129,"mtime":1611199046095,"results":"20","hashOfConfig":"12"},{"size":7886,"mtime":1611185070512,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1h913gr",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/index.js",[],["48","49"],"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/App.js",["50","51"],"import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport YuGiOh from './components/YuGiOh';\nimport SearchLayout from './components/SearchLayout';\n\n\nimport {withRouter} from 'react-router';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={withRouter(SearchLayout)} />\n          <Route path=\"/yugioh\" component={withRouter(YuGiOh)} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/reportWebVitals.js",[],"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/Header/index.js",["52","53","54"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from './Card.png';\nimport { Link } from \"react-router-dom\";\n\n\nfunction Header() {\n  return(\n    <div className=\"Header\">\n      <header>\n        <nav>\n          <div className=\"logo\">\n            <a href=\"/\">\n              <img src={Card} alt=\"logo\"/>\n            </a>\n          </div>\n          <ul>\n            <li>\n              <Link to=\"/\">Pokemon</Link>\n            </li>\n            <li>\n              <Link to=\"/yugioh\">YuGiOh</Link>\n            </li>\n            <li>\n              <a href=\"#\">Sign In</a>\n            </li>\n            <li>\n              <a href=\"#\">Sign Up</a>\n            </li>\n          </ul>\n        </nav>\n      </header>\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/SearchLayout/index.js",["55","56","57"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { getBearerToken, getAllCategories,\n        getPokemonCategoryId, getCategoryProducts,\n        getAllProductsById, } from \"../../tcgplayer.js\";\n\nimport Search from '../Search';\nimport Products from '../Products';\n\n\nclass SearchLayout extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      numProductsToShow: 12,\n      search_term: '',\n      checkedBoxes: [],\n      all_products_are_shown: false,\n      category: 'pokemon',\n    };\n  }\n\n  async componentDidMount(){\n    this.setState({'products': 'loading' });\n\n    await getBearerToken();\n    const categories = await getAllCategories();\n    let pokemonCategoryId = await getPokemonCategoryId(categories);\n    let all_pokemon_products = await getCategoryProducts(pokemonCategoryId, this.state.search_term);\n    let all_product_details = await getAllProductsById(all_pokemon_products);\n\n    this.setState({\n      'products': all_product_details,\n      'const_products': all_product_details\n     });\n  }\n\n  showMoreProducts = () => {\n    let new_total_products_shown = this.state.numProductsToShow+12;\n    if(new_total_products_shown > this.state.products.length){\n      this.setState({'all_products_are_shown': true});\n    }\n    this.setState({'numProductsToShow': new_total_products_shown});\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value});\n  }\n\n  ifShownMoreThanLength = (numProductsToShow, products_length) => {\n    if(this.state.numProductsToShow > this.state.products.length){\n      this.setState({'all_products_are_shown': true});\n    } else{\n      this.setState({'all_products_are_shown': false});\n    }\n  }\n\n  handleSearch = async e => {\n    e.preventDefault();\n\n    this.setState({'products': 'loading' });\n\n    await getBearerToken();\n    const categories = await getAllCategories();\n    let pokemonCategoryId = await getPokemonCategoryId(categories);\n    let all_pokemon_products = await getCategoryProducts(pokemonCategoryId, this.state.search_term);\n    let all_product_details = await getAllProductsById(all_pokemon_products);\n\n    this.setState({\n      'products': all_product_details,\n      'const_products': all_product_details,\n      'numProductsToShow' : 12,\n    });\n\n    this.ifShownMoreThanLength(this.state.numProductsToShow, this.state.products.length);\n  }\n\n  handleCheckboxPrinting = (e, printing) => {\n\n    const checkedBoxes = [...this.state.checkedBoxes];\n    const products = this.state.const_products;\n\n    if(e.target.checked){\n      checkedBoxes.push(printing);\n    } else {\n      const index = checkedBoxes.findIndex( (checked) => checked === printing);\n      checkedBoxes.splice(index, 1);\n    }\n\n    // check if a product contains a filter that is checked (checkedBoxes array)\n    // for printing types (holofoil, reverse holofoil, etc), check the subTypeName in relevant_product_market_prices object in a product object\n    let filtered_products = products;\n    //holofoil, reverse holofoil, etc\n    const non_int_filters = checkedBoxes.filter(e => !Number.isInteger(e));\n    //prices\n    const int_filters = checkedBoxes.filter(e => Number.isInteger(e));\n\n    console.log(non_int_filters);\n    console.log(int_filters);\n\n    if(checkedBoxes.length > 0){\n      filtered_products = filter_products_from_checkboxes(filtered_products, int_filters, non_int_filters);\n    }\n\n    let numProductsToShow = filtered_products.length < 12 ? filtered_products.length : 12;\n\n    this.setState({checkedBoxes: checkedBoxes, products: filtered_products, numProductsToShow: numProductsToShow});\n    this.ifShownMoreThanLength(this.state.numProductsToShow, this.state.products.length);\n  }\n\n  render() {\n    return (\n      <div className='SearchLayout'>\n        <Grid container spacing={3} className=\"layout-container\">\n          <Grid container xs={3} className=\"filter-column\">\n            <Search\n              searchTerm={this.state.search_term}\n              onChange={this.onChange}\n              handleSearch={this.handleSearch}\n              handleCheckboxPrinting={this.handleCheckboxPrinting}\n              checkedBoxes={this.state.checkedBoxes}\n              category={this.state.category}\n            />\n          </Grid>\n          <Grid container spacing={3} xs={9} className=\"layout-container\">\n            <Products products={this.state.products} numProductsToShow={this.state.numProductsToShow}/>\n\n            {(this.state.products && this.state.products !== 'loading' && !this.state.all_products_are_shown) ?\n              <div className=\"show-more-button-container\" onClick={this.showMoreProducts} >\n                <div className=\"show-more-button\">\n                  Show More\n                </div>\n              </div>\n              :\n              ''\n            }\n\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n const filter_products_from_checkboxes = (filtered_products, int_filters, non_int_filters) => {\n  // we check if either type of filters are checked,\n  // then check if either type of filter is checked while the other is not,\n  // if nothing checked, move on\n  if(non_int_filters.length > 0 && int_filters.length > 0){\n    //this line will return any product that contains matching filter (i.e. if holofoil is checked, return all holofoils)\n    filtered_products = filter_from_non_int_filters(filtered_products, non_int_filters);\n    filtered_products = filter_from_int_filters(filtered_products, int_filters);\n\n  } else if (non_int_filters.length > 0 && int_filters.length === 0){\n    //this line will return any product that contains matching filter (i.e. if holofoil is checked, return all holofoils)\n    filtered_products = filter_from_non_int_filters(filtered_products, non_int_filters);\n\n  } else if (non_int_filters.length === 0 && int_filters.length > 0){\n    // this line will return any product that is less than a price checked\n    filtered_products = filter_from_int_filters(filtered_products, int_filters);\n  }\n\n  return filtered_products;\n}\n\nconst filter_from_int_filters = (filtered_products, int_filters) => {\n  return filtered_products.filter(product =>\n                            int_filters.find((ch) =>\n                             //check if checkedBox is a number\n                            product['relevant_product_market_prices'] ?\n                             //if yes, check if marketPrice is present\n                            product['relevant_product_market_prices'].marketPrice !== null ?\n                               // if marketPrice is present, finally check is marketPrice is less than checkedBox\n                               product['relevant_product_market_prices'].marketPrice < ch :\n                               // if no marketPrice, check if midPrice\n                               product['relevant_product_market_prices'].midPrice !== null ?\n                                 // if midPrice is present, finally check if midprice is less than checkedBox\n                                 product['relevant_product_market_prices'].midPrice < ch :\n                                 false\n                             :\n                             false\n                            ));\n}\n\nconst filter_from_non_int_filters = (filtered_products, non_int_filters) => {\n  return filtered_products.filter(product =>\n                              non_int_filters.find((ch) =>\n                              //if 'relevant_product_market_prices' object is present,\n                              // we see if matching printing filter is present\n                                product['relevant_product_market_prices'] ?\n                                product['relevant_product_market_prices'].subTypeName === ch :\n                                false\n                              ));\n}\n\nexport default SearchLayout;\n","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/tcgplayer.js",["58","59","60","61"],"const axios = require('axios');\n\nconst PUBLIC_KEY = 'e461db10-9b1d-48f4-b689-e6bd4e1be9dd';\nconst PRIVATE_KEY = 'edfa43ea-dff7-4788-8a2b-285afa3e172f';\n\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\n\nlet headers = {\n  // 'User-Agent': 'CardValue',\n  'Content-Type': 'application/x-www-form-urlencoded',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Credentials': 'true',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  'Access-Control-Allow-Methods': 'POST'\n  // 'Content-Type': 'application/json',\n  // 'Content-Type': 'multipart/form-data',\n};\n\nlet dataString =\n  'grant_type=client_credentials' +\n  '&client_id=' + PUBLIC_KEY +\n  '&client_secret=' + PRIVATE_KEY;\n\nexport let getBearerToken = async () => {\n  console.log('calling to api');\n  const response = await axios(\n    {\n      url: PROXY_URL + 'https://api.tcgplayer.com/token',\n      method: 'POST',\n      headers: headers,\n      data: dataString,\n    })\n  .catch(function (error){\n    console.log(error.response);\n    console.log('error');\n  });\n\n  const bearer = response.data.access_token;\n  headers['Authorization'] = 'bearer ' + bearer;\n  console.log('bearer token success');\n  // console.log(headers);\n  // console.log(bearer);\n\n  return bearer;\n}\n\n\n\nexport let getAllCategories = async () => {\n  console.log('calling to api to get all categories');\n  const response = await axios({\n    url: 'https://api.tcgplayer.com/catalog/categories' + '?limit=16' + '&sortOrder=name',\n    method: 'GET',\n    headers: headers,\n  })\n  .catch((error) => {\n    console.log(error.response);\n  });\n\n  // console.log(response.data);\n  console.log('all categories call success');\n  //all categories\n  const all_categories = response.data;\n\n  return all_categories;\n\n}\n\nexport let getPokemonCategoryId = (all_categories) => {\n  console.log('getting pokemon categoryId');\n  let pokemon_category_object = all_categories.results.find( x => x.name === 'Pokemon');\n  console.log(pokemon_category_object);\n  let pokemonCategoryId = pokemon_category_object['categoryId'];\n  console.log(pokemonCategoryId);\n  console.log('pokemon categoryId success');\n\n  return pokemonCategoryId;\n}\n\nexport let getYugiohCategoryId = (all_categories) => {\n  console.log('getting YuGiOh categoryId');\n  let yugioh_category_object = all_categories.results.find( x => x.name === 'YuGiOh');\n  console.log(yugioh_category_object);\n  let yugiohCategoryId = yugioh_category_object['categoryId'];\n  console.log(yugiohCategoryId);\n  console.log('yugioh categoryId success');\n\n  return yugiohCategoryId;\n}\n\n//unused, function gets media files like jpeg, etc\n//unwanted for scope of project\nexport let getPokemonMedia = async (pokemonId) => {\n  console.log('calling to api to get all pokemon category media')\n  const response = await axios({\n    url: 'https://api.tcgplayer.com/catalog/categories/' + pokemonId + '/media',\n    method: 'GET',\n    headers: headers,\n  }).catch((error) => {\n    console.log(error.response);\n  });\n\n  const all_pokemon_media = response.data;\n\n  console.log(all_pokemon_media);\n  console.log('all pokemon category media success');\n\n  return all_pokemon_media;\n}\n\nexport let getCategoryProducts = async (categoryId, search_term) => {\n  console.log('calling to api to get pokemon products');\n  const response = await axios({\n    url: 'https://api.tcgplayer.com/catalog/categories/' + categoryId + '/search',\n    method: 'POST',\n    headers:\n    {\n      \"Authorization\": headers['Authorization'],\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"text/json\"\n    },\n    // body: {\n    //   sort: \"\",\n    //   limit: 0,\n    //   offset: 0,\n    //   filters: [{name: 'ProductName', values: ['Pokemon',]}],\n    // },\n    data: \"{\\\"filters\\\":[{\\\"values\\\":[\\\"\" + search_term + \"\\\"],\\\"name\\\":\\\"ProductName\\\"}],\\\"limit\\\":144,\\\"includeAggregates\\\":true,\\\"offset\\\":0,\\\"sort\\\":\\\"MinPrice DESC\\\"}\",\n  }).catch((error) => {\n    console.log(error.response);\n  });\n  console.log(response);\n  const all_category_products = response.data;\n\n  console.log(all_category_products);\n  console.log('all pokemon products success');\n\n  return all_category_products.results;\n}\n\n\nexport let getTwelveMoreProductsById = async (arrayOfProductIds, offset) => {\n  let twelve_more_product_details = [];\n\n  console.log('calling to api to get Product Details (12)');\n  for(var i = offset; i < offset + 12; i++){\n    twelve_more_product_details.push(await getOneProductById(arrayOfProductIds[i]));\n  }\n  // arrayOfProductIds.forEach( x => all_product_details.push(getOneProductById(x)));\n  console.log(twelve_more_product_details);\n\n  return twelve_more_product_details;\n\n}\n\n\nexport let getAllProductsById = async (arrayOfProductIds) => {\n  let all_product_details = [];\n\n  console.log('calling to api to get Product Details (144)');\n  // for(var i = 0; i < arrayOfProductIds.length; i++){\n  //   all_product_details.push(await getOneProductById(arrayOfProductIds[i]));\n  // }\n\n  await Promise.all(\n    arrayOfProductIds.map(async (id) => {\n      all_product_details.push(await getOneProductById(id));\n    })\n  )\n\n  //factor out later\n  //we check if there is a relevant_product_market_prices object\n  // if so, is there marketPrice property\n  // if not, is there a midPrice property\n  all_product_details.sort((a,b) => {\n    return b['relevant_product_market_prices'] && a['relevant_product_market_prices'] ?\n       b['relevant_product_market_prices'].marketPrice && a['relevant_product_market_prices'].marketPrice ?\n         b['relevant_product_market_prices'].marketPrice - a['relevant_product_market_prices'].marketPrice\n         :\n         b['relevant_product_market_prices'].midPrice && a['relevant_product_market_prices'].marketPrice ?\n          b['relevant_product_market_prices'].midPrice - a['relevant_product_market_prices'].marketPrice\n          :\n          b['relevant_product_market_prices'].marketPrice && a['relevant_product_market_prices'].midPrice ?\n           b['relevant_product_market_prices'].marketPrice - a['relevant_product_market_prices'].midPrice\n           :\n           b['relevant_product_market_prices'].midPrice && a['relevant_product_market_prices'].midPrice ?\n            b['relevant_product_market_prices'].midPrice - a['relevant_product_market_prices'].midPrice\n            :\n            0\n    :\n    0\n  });\n\n  // arrayOfProductIds.forEach( x => all_product_details.push(getOneProductById(x)));\n  console.log(all_product_details);\n\n  return all_product_details;\n\n}\n\nexport let getOneProductById = async (productId) => {\n  console.log('calling to api to get ' + productId + ' details');\n  const response = await axios({\n    url: 'https://api.tcgplayer.com/catalog/products/' + productId,\n    method: 'GET',\n    headers: headers,\n  }).catch((error) => {\n    console.log(error.response);\n  });\n\n  const relevant_product_market_prices = await getProductMarketPrices(productId);\n\n  let product_details = response.data.results;\n  product_details['relevant_product_market_prices'] = relevant_product_market_prices;\n  // console.log(response.data.results);\n  console.log(productId + ' success');\n  console.log(product_details);\n\n  return product_details;\n\n}\n\nlet getProductMarketPrices = async (productId) => {\n  console.log('calling to api to get ' + productId + ' market price');\n\n  const response = await axios({\n    url: 'https://api.tcgplayer.com/pricing/product/' + productId,\n    method: 'GET',\n    headers: headers,\n  }).catch((error) => {\n    console.log(error.response);\n  });\n\n  let all_prints_market_prices = response.data.results;\n\n  // console.log(all_prints_market_prices);\n\n  let filtered_market_prices = all_prints_market_prices.find( printing => printing.marketPrice);\n\n  //if we cannot find marketPrice property, check for midPrice\n  //if there is no midPrice property, return {}\n  if(!filtered_market_prices){\n    filtered_market_prices = all_prints_market_prices.find( printing => printing.midPrice);\n  }\n\n  // console.log(filtered_market_prices);\n\n  return filtered_market_prices;\n}\n\n\nlet printThis = async (print) => {\n  console.log(print);\n}\n\nconst AllCalls = async () => {\n  console.log('calling both functions');\n  await getBearerToken();\n  const categories = await getAllCategories();\n  let pokemonCategoryId = await getPokemonCategoryId(categories);\n  let all_pokemon_products = await getCategoryProducts(pokemonCategoryId);\n  let all_product_details = await getAllProductsById(all_pokemon_products);\n\n  return all_product_details;\n}\n\n// AllCalls().then( (res) =>\n  // {\n    // console.log(res);\n  // }\n// )\n// console.log(headers['bearer']);\n\n// export default { headers, dataString, PUBLIC_KEY, PRIVATE_KEY};\n","/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/Search/index.js",[],"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/SearchChecklist/index.js",[],"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/Products/index.js",["62","63"],"/Users/cdot/Desktop/100DaysOfCode/trading-cards/src/components/YuGiOh/index.js",["64","65","66"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { getBearerToken, getAllCategories,\n        getYugiohCategoryId, getCategoryProducts,\n        getAllProductsById, } from \"../../tcgplayer.js\";\n\nimport Search from '../Search';\nimport Products from '../Products';\n\n\nclass YuGiOh extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      numProductsToShow: 12,\n      search_term: '',\n      checkedBoxes: [],\n      all_products_are_shown: false,\n      category: 'yugioh',\n    };\n  }\n\n  async componentDidMount(){\n    this.setState({'products': 'loading' });\n\n    await getBearerToken();\n    const categories = await getAllCategories();\n    let yugiohCategoryId = await getYugiohCategoryId(categories);\n    let all_yugioh_products = await getCategoryProducts(yugiohCategoryId, this.state.search_term);\n    let all_product_details = await getAllProductsById(all_yugioh_products);\n\n    this.setState({\n      'products': all_product_details,\n      'const_products': all_product_details\n     });\n  }\n\n  showMoreProducts = () => {\n    let new_total_products_shown = this.state.numProductsToShow+12;\n    if(new_total_products_shown > this.state.products.length){\n      this.setState({'all_products_are_shown': true});\n    }\n    this.setState({'numProductsToShow': new_total_products_shown});\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value});\n  }\n\n  ifShownMoreThanLength = (numProductsToShow, products_length) => {\n    if(this.state.numProductsToShow > this.state.products.length){\n      this.setState({'all_products_are_shown': true});\n    } else{\n      this.setState({'all_products_are_shown': false});\n    }\n  }\n\n  handleSearch = async e => {\n    e.preventDefault();\n\n    this.setState({'products': 'loading' });\n\n    await getBearerToken();\n    const categories = await getAllCategories();\n    let yugiohCategoryId = await getYugiohCategoryId(categories);\n    let all_yugioh_products = await getCategoryProducts(yugiohCategoryId, this.state.search_term);\n    let all_product_details = await getAllProductsById(all_yugioh_products);\n\n    this.setState({\n      'products': all_product_details,\n      'const_products': all_product_details,\n      'numProductsToShow' : 12,\n    });\n\n    this.ifShownMoreThanLength(this.state.numProductsToShow, this.state.products.length);\n  }\n\n  handleCheckboxPrinting = (e, printing) => {\n\n    const checkedBoxes = [...this.state.checkedBoxes];\n    const products = this.state.const_products;\n\n    if(e.target.checked){\n      checkedBoxes.push(printing);\n    } else {\n      const index = checkedBoxes.findIndex( (checked) => checked === printing);\n      checkedBoxes.splice(index, 1);\n    }\n\n    // check if a product contains a filter that is checked (checkedBoxes array)\n    // for printing types (holofoil, reverse holofoil, etc), check the subTypeName in relevant_product_market_prices object in a product object\n    let filtered_products = products;\n    //holofoil, reverse holofoil, etc\n    const non_int_filters = checkedBoxes.filter(e => !Number.isInteger(e));\n    //prices\n    const int_filters = checkedBoxes.filter(e => Number.isInteger(e));\n\n    console.log(non_int_filters);\n    console.log(int_filters);\n\n    if(checkedBoxes.length > 0){\n      filtered_products = filter_products_from_checkboxes(filtered_products, int_filters, non_int_filters);\n    }\n\n    let numProductsToShow = filtered_products.length < 12 ? filtered_products.length : 12;\n\n    this.setState({checkedBoxes: checkedBoxes, products: filtered_products, numProductsToShow: numProductsToShow});\n    this.ifShownMoreThanLength(this.state.numProductsToShow, this.state.products.length);\n  }\n\n  render() {\n    return (\n      <div className='SearchLayout'>\n        <Grid container spacing={3} className=\"layout-container\">\n          <Grid container xs={3} className=\"filter-column\">\n            <Search\n              searchTerm={this.state.search_term}\n              onChange={this.onChange}\n              handleSearch={this.handleSearch}\n              handleCheckboxPrinting={this.handleCheckboxPrinting}\n              checkedBoxes={this.state.checkedBoxes}\n              category={this.state.category}\n            />\n          </Grid>\n          <Grid container spacing={3} xs={9} className=\"layout-container\">\n            <Products products={this.state.products} numProductsToShow={this.state.numProductsToShow}/>\n\n            {(this.state.products && this.state.products !== 'loading' && !this.state.all_products_are_shown) ?\n              <div className=\"show-more-button-container\" onClick={this.showMoreProducts} >\n                <div className=\"show-more-button\">\n                  Show More\n                </div>\n              </div>\n              :\n              ''\n            }\n\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n const filter_products_from_checkboxes = (filtered_products, int_filters, non_int_filters) => {\n  // we check if either type of filters are checked,\n  // then check if either type of filter is checked while the other is not,\n  // if nothing checked, move on\n  if(non_int_filters.length > 0 && int_filters.length > 0){\n    //this line will return any product that contains matching filter (i.e. if holofoil is checked, return all holofoils)\n    filtered_products = filter_from_non_int_filters(filtered_products, non_int_filters);\n    filtered_products = filter_from_int_filters(filtered_products, int_filters);\n\n  } else if (non_int_filters.length > 0 && int_filters.length === 0){\n    //this line will return any product that contains matching filter (i.e. if holofoil is checked, return all holofoils)\n    filtered_products = filter_from_non_int_filters(filtered_products, non_int_filters);\n\n  } else if (non_int_filters.length === 0 && int_filters.length > 0){\n    // this line will return any product that is less than a price checked\n    filtered_products = filter_from_int_filters(filtered_products, int_filters);\n  }\n\n  return filtered_products;\n}\n\nconst filter_from_int_filters = (filtered_products, int_filters) => {\n  return filtered_products.filter(product =>\n                            int_filters.find((ch) =>\n                             //check if checkedBox is a number\n                            product['relevant_product_market_prices'] ?\n                             //if yes, check if marketPrice is present\n                            product['relevant_product_market_prices'].marketPrice !== null ?\n                               // if marketPrice is present, finally check is marketPrice is less than checkedBox\n                               product['relevant_product_market_prices'].marketPrice < ch :\n                               // if no marketPrice, check if midPrice\n                               product['relevant_product_market_prices'].midPrice !== null ?\n                                 // if midPrice is present, finally check if midprice is less than checkedBox\n                                 product['relevant_product_market_prices'].midPrice < ch :\n                                 false\n                             :\n                             false\n                            ));\n}\n\nconst filter_from_non_int_filters = (filtered_products, non_int_filters) => {\n  return filtered_products.filter(product =>\n                              non_int_filters.find((ch) =>\n                              //if 'relevant_product_market_prices' object is present,\n                              // we see if matching printing filter is present\n                                product['relevant_product_market_prices'] ?\n                                product['relevant_product_market_prices'].subTypeName === ch :\n                                false\n                              ));\n}\n\nexport default YuGiOh;\n",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":13,"column":3,"nodeType":"73","messageId":"74","endLine":13,"endColumn":7},{"ruleId":"71","severity":1,"message":"76","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"77","severity":1,"message":"78","line":25,"column":15,"nodeType":"79","endLine":25,"endColumn":27},{"ruleId":"77","severity":1,"message":"78","line":28,"column":15,"nodeType":"79","endLine":28,"endColumn":27},{"ruleId":"71","severity":1,"message":"80","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"76","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"81","line":4,"column":8,"nodeType":"73","messageId":"74","endLine":4,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":52,"column":57,"nodeType":"84","messageId":"85","endLine":52,"endColumn":58},{"ruleId":"82","severity":1,"message":"83","line":52,"column":71,"nodeType":"84","messageId":"85","endLine":52,"endColumn":72},{"ruleId":"71","severity":1,"message":"86","line":252,"column":5,"nodeType":"73","messageId":"74","endLine":252,"endColumn":14},{"ruleId":"71","severity":1,"message":"87","line":256,"column":7,"nodeType":"73","messageId":"74","endLine":256,"endColumn":15},{"ruleId":"71","severity":1,"message":"80","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"76","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"80","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"76","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"81","line":4,"column":8,"nodeType":"73","messageId":"74","endLine":4,"endColumn":13},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'ReactDOM' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Component' is defined but never used.","'Paper' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'printThis' is assigned a value but never used.","'AllCalls' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]